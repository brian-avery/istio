--- pilot/pkg/proxy/envoy/v2/rds.go
+++ pilot/pkg/proxy/envoy/v2/rds.go
@@ -117,18 +147,64 @@ func (s *DiscoveryServer) generateRawRoutes(con *XdsConnection, push *model.Push
 
 		if err = r.Validate(); err != nil {
 			retErr := fmt.Errorf("RDS: Generated invalid route %s for node %v: %v", routeName, con.modelNode, err)
-			adsLog.Errorf("RDS: Generated invalid routes for route:%s for node:%v: %v, %v", routeName, con.modelNode.ID, err, r)
+			adsLog.Errorf("RDS: Generated invalid routes for route: %s for node: %v: %v, %v", routeName, con.modelNode.ID, err, r)
 			pushes.With(prometheus.Labels{"type": "rds_builderr"}).Add(1)
 			// Generating invalid routes is a bug.
 			// Panic instead of trying to recover from that, since we can't
 			// assume anything about the state.
 			panic(retErr.Error())
 		}
+
 		rc = append(rc, r)
 	}
 	return rc, nil
 }
 
+func (s *DiscoveryServer) generateRouteConfig(con *XdsConnection, push *model.PushContext, routeName string) (*xdsapi.RouteConfiguration, error) {
+	routeConfig, err := s.ConfigGenerator.BuildHTTPRoutes(s.Env, con.modelNode, push, routeName)
+	if err != nil {
+		retErr := fmt.Errorf("RDS: Failed to generate route %s for node %v: %v", routeName, con.modelNode, err)
+		adsLog.Warnf("RDS: Failed to generate routes for route %s for node %v: %v", routeName, con.modelNode, err)
+		pushes.With(prometheus.Labels{"type": "rds_builderr"}).Add(1)
+		return nil, retErr
+	}
+
+	if routeConfig == nil {
+		adsLog.Warnf("RDS: got nil value for route %s for node %v: %v", routeName, con.modelNode, err)
+		return nil, nil
+	}
+
+	if err = routeConfig.Validate(); err != nil {
+		retErr := fmt.Errorf("RDS: Generated invalid route %s for node %v: %v", routeName, con.modelNode, err)
+		adsLog.Errorf("RDS: Generated invalid routes for route: %s for node: %v: %v, %v", routeName, con.modelNode, err, routeConfig)
+		pushes.With(prometheus.Labels{"type": "rds_builderr"}).Add(1)
+		// Generating invalid routes is a bug.
+		// Panic instead of trying to recover from that, since we can't
+		// assume anything about the state.
+		panic(retErr.Error())
+	}
+
+	return routeConfig, nil
+}
+
+func deltaRouteDiscoveryResponse(routeConfigs []*xdsapi.RouteConfiguration, removedResources []string) *xdsapi.DeltaDiscoveryResponse {
+	resp := &xdsapi.DeltaDiscoveryResponse{
+		Nonce:             nonce(),
+		SystemVersionInfo: versionInfo(),
+	}
+
+	for _, routeConfig := range routeConfigs {
+		marshaledRoute, _ := types.MarshalAny(routeConfig)
+		resp.Resources = append(resp.Resources, xdsapi.Resource{
+			Name: routeConfig.Name,
+			//BAVERY_TODO: Add version.... md5? Something else? xDS increments an integer, but I wonder if we can do one better (i.e. repeatable)
+			Resource: marshaledRoute,
+		})
+	}
+	resp.RemovedResources = removedResources
+	return resp
+}
+
 func routeDiscoveryResponse(rs []*xdsapi.RouteConfiguration, version string) *xdsapi.DiscoveryResponse {
 	resp := &xdsapi.DiscoveryResponse{
 		TypeUrl:     RouteType,
